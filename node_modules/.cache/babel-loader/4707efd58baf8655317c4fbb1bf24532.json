{"ast":null,"code":"// import React, { Component } from \"react\";\n// import { connect } from \"react-redux\";\n// import { fetchSearchedNews } from \"../Redux/actions/newsAction\";\n// import News from \"../components/news\";\n// class SearchPage extends Component {\n//   componentDidMount() {\n//     const searchQuery = this.props.match.params.searchQuery;\n//     console.log(\"I am getting mounted\");\n//     this.props.fetchSearchedNews(searchQuery);\n//   }\n//   componentDidUpdate(prevProps) {\n//     const prevSearchQuery = prevProps.match.params.searchQuery;\n//     const newSearchQuery = this.props.match.params.searchQuery;\n//     if (prevSearchQuery !== newSearchQuery) {\n//       this.props.fetchSearchedNews(newSearchQuery);\n//     }\n//   }\n//   render() {\n//     return this.props.videos ? (\n//       <News News={this.props.news} mode={search} />\n//     ) : (\n//       <h1>Loading</h1>\n//     );\n//   }\n// }\n// const mapStateToProps = (storeState) => {\n//   return {\n//     videos: storeState.videoState.videos,\n//   };\n// };\n// export default connect(mapStateToProps, { fetchSearchedNews })(SearchPage);","map":{"version":3,"sources":["/Users/surya/Desktop/Stay-Updated/Login/src/Pages/SearchPage.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { Component } from \"react\";\n// import { connect } from \"react-redux\";\n// import { fetchSearchedNews } from \"../Redux/actions/newsAction\";\n// import News from \"../components/news\";\n\n// class SearchPage extends Component {\n//   componentDidMount() {\n//     const searchQuery = this.props.match.params.searchQuery;\n//     console.log(\"I am getting mounted\");\n//     this.props.fetchSearchedNews(searchQuery);\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     const prevSearchQuery = prevProps.match.params.searchQuery;\n//     const newSearchQuery = this.props.match.params.searchQuery;\n//     if (prevSearchQuery !== newSearchQuery) {\n//       this.props.fetchSearchedNews(newSearchQuery);\n//     }\n//   }\n\n//   render() {\n//     return this.props.videos ? (\n//       <News News={this.props.news} mode={search} />\n//     ) : (\n//       <h1>Loading</h1>\n//     );\n//   }\n// }\n// const mapStateToProps = (storeState) => {\n//   return {\n//     videos: storeState.videoState.videos,\n//   };\n// };\n\n// export default connect(mapStateToProps, { fetchSearchedNews })(SearchPage);\n"]},"metadata":{},"sourceType":"module"}